package repository.querys;

public enum TableCreationQuery {

    CREATE_PASSENGER_TABLE("CREATE TABLE IF NOT EXISTS Passenger (userId SERIAL PRIMARY KEY, userName VARCHAR(50) NOT NULL, password VARCHAR(255) NOT NULL, mobileNumber VARCHAR(15) UNIQUE);"),
    CREATE_OPERATOR_TABLE("CREATE TABLE IF NOT EXISTS Owner (userId SERIAL PRIMARY KEY, userName VARCHAR(50)  NOT NULL, password VARCHAR(255) NOT NULL, mobileNumber VARCHAR(15) UNIQUE, companyName VARCHAR(100), gstNumber VARCHAR(20) UNIQUE, headOfficeCity VARCHAR(100), status VARCHAR(20) NOT NULL DEFAULT 'Active', dateJoined TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP);"),
    CREATE_BUS_TABLE("CREATE TABLE IF NOT EXISTS Bus (busId BIGSERIAL PRIMARY KEY,userId INT NOT NULL,totalSeats INT NOT NULL,registrationNumber VARCHAR(20) UNIQUE NOT NULL,busName VARCHAR(100),busType VARCHAR(50) NOT NULL,amenities TEXT,busBasePrice DECIMAL(10, 2),minTurnaroundHours DECIMAL(4, 2) NOT NULL DEFAULT 3.0,status VARCHAR(15) NOT NULL DEFAULT 'ACTIVE', FOREIGN KEY (userId) REFERENCES owner(userId));"),
    CREATE_ADMIN_TABLE("CREATE TABLE IF NOT EXISTS Admin (userId SERIAL PRIMARY KEY, userName VARCHAR(50) UNIQUE NOT NULL, password VARCHAR(255) NOT NULL, mobileNumber VARCHAR(15) UNIQUE);"),
    CREATE_SEAT_TABLE("CREATE TABLE IF NOT EXISTS Seat (seatId BIGSERIAL PRIMARY KEY, busId BIGINT NOT NULL, seatNumber VARCHAR(5) NOT NULL, seatType VARCHAR(20), seatRow INT, deckType VARCHAR(10), seatColumn INT, genderPreference CHAR(1), isWindowSeat BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (busId) REFERENCES Bus(busId));"),
    CREATE_ROUTE_TABLE("CREATE TABLE IF NOT EXISTS Route (routeId SERIAL PRIMARY KEY, routeName VARCHAR(150), originCity VARCHAR(100) NOT NULL, destinationCity VARCHAR(100) NOT NULL, basePrice DECIMAL(10, 2), userId INT NOT NULL, UNIQUE (originCity, destinationCity, userId), FOREIGN KEY (userId) REFERENCES owner(userId));"),
    CREATE_ROUTE_STOPS_TABLE("CREATE TABLE IF NOT EXISTS RouteStop (routeStopId SERIAL PRIMARY KEY, routeId INT NOT NULL, stopCity VARCHAR(100) NOT NULL, stopLocation VARCHAR(150), stopOrder INT NOT NULL, distanceFromOriginKm DOUBLE PRECISION NOT NULL, FOREIGN KEY (routeId) REFERENCES Route(routeId), UNIQUE (routeId, stopOrder));"),
    CREATE_CANCELLATION_TABLE("CREATE TABLE IF NOT EXISTS Cancellation (cancellationId BIGSERIAL PRIMARY KEY, bookingId BIGINT NOT NULL, tripId BIGINT NOT NULL, cancellationTime TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP, cancellationReason VARCHAR(255), refundAmount NUMERIC(10, 2) NOT NULL, cancellationCharge NUMERIC(10, 2) NOT NULL DEFAULT 0.00, initiatedBy VARCHAR(20) NOT NULL, refundStatus VARCHAR(20) NOT NULL, FOREIGN KEY (bookingId) REFERENCES Booking(bookingId), FOREIGN KEY (tripId) REFERENCES Trip(tripId));"),
    CREATE_DRIVER_TABLE("CREATE TABLE IF NOT EXISTS Driver (driverId SERIAL PRIMARY KEY, userId INT NOT NULL, fullName VARCHAR(150) NOT NULL, phoneNumber VARCHAR(15) UNIQUE NOT NULL, email VARCHAR(100) UNIQUE, address VARCHAR(255), licenseNumber VARCHAR(50) UNIQUE NOT NULL, licenseExpiryDate DATE NOT NULL, licenseType VARCHAR(50), driverStatus VARCHAR(20) NOT NULL DEFAULT 'Active', dateOfJoining DATE, FOREIGN KEY (userId) REFERENCES owner(userId));"),
    CREATE_REPORT_TABLE("CREATE TABLE IF NOT EXISTS Report (reportId BIGSERIAL PRIMARY KEY, userId INT NOT NULL, reportSubject VARCHAR(150) NOT NULL, reportDetails TEXT NOT NULL, reportTime TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP, reportStatus VARCHAR(20) NOT NULL DEFAULT 'OPEN', tripId BIGINT, FOREIGN KEY (userId) REFERENCES Passenger(userId), FOREIGN KEY (tripId) REFERENCES Trip(tripId));"),
    CREATE_TRIP_TABLE("CREATE TABLE IF NOT EXISTS Trip (tripId BIGSERIAL PRIMARY KEY, driverId INT NOT NULL, routeId INT NOT NULL, busId BIGINT NOT NULL, tripDate DATE NOT NULL, departureTime TIME WITHOUT TIME ZONE NOT NULL, arrivalTime TIME WITHOUT TIME ZONE NOT NULL, baseFare NUMERIC(10, 2) NOT NULL, tripStatus VARCHAR(20) NOT NULL DEFAULT 'SCHEDULED', FOREIGN KEY (driverId) REFERENCES Driver(driverId), FOREIGN KEY (routeId) REFERENCES Route(routeId), FOREIGN KEY (busId) REFERENCES Bus(busId), UNIQUE (routeId, tripDate, departureTime));"),
    CREATE_BOOKING_TABLE("CREATE TABLE IF NOT EXISTS Booking (bookingId BIGSERIAL PRIMARY KEY, userId INT NOT NULL, tripId BIGINT NOT NULL, seatId INT NOT NULL, totalAmount NUMERIC(10, 2) NOT NULL, passengerName VARCHAR(100) NOT NULL, passengerGender CHAR(1) NOT NULL, passengerAge INT NOT NULL, bookingStatus VARCHAR(20) NOT NULL, bookingTime TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (userId) REFERENCES Passenger(userId), FOREIGN KEY (tripId) REFERENCES Trip(tripId), FOREIGN KEY (seatId) REFERENCES Seat(seatId));");

    private String query;

    TableCreationQuery(String query) {
        this.query = query;
    }

    public String getQuery() {
        return query;
    }
}
